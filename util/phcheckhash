#!/usr/bin/perl -w

# Tool to check the hash of all the image files. This tool recognizes
# any change in hash values of individual files.

my $script = __FILE__;
my $localdir = ".";
if ($script =~ s/\/[^\/]*$//) {
  $localdir = $script;
}
push @INC, "$localdir/../inc";

require 'photos_util.pm';

pdb_init();

my $gl_verbose = 0;
# By default, do all; turned off when a single image or set is done
my $gl_do_all = 1;
# Update the value if requested
my $gl_update = 0;

my $arg = shift;
while (defined($arg)) {
  if ($arg eq "-h" || $arg eq "--help") {
    disp_help();
    exit(0);
  } elsif ($arg eq "-v") {
    $gl_verbose = 1;
  } elsif ($arg eq "--update") {
    $gl_update = 1;
  } elsif ($arg =~ /^\d\d\d\d\d\d\d\d-\d\d\d\d\d\d\w?$/) {
    process_id($arg);
    $gl_do_all = 0;
  } elsif ($arg =~ /^\w\d\d\d\d\w?$/) {
    process_id($arg);
    $gl_do_all = 0;
  } else {
    print "Unknown argument: $arg\n";
    disp_help();
    exit(0);
  }
  $arg = shift;
}

if ($gl_do_all) {
  process_all();
}

sub disp_help {
  print "phcheckhash [options] [id]*\n";
  print "---------------------------------------------------------------\n";
  print "Available options:\n";
  print " -h            display this help\n";
  print " -v            verbose (more output)\n";
  print " --update      if the hash is different, update the database\n";
}

sub process_all {
  # Iterate over all the photos in the database
  my $iter = pdb_iter_new("", 500);
  my $id = pdb_iter_next($iter);
  my $count = 0;
  while (defined($id) && ($id ne "") && ($count < 1000000)) {
    $count++;

    if ($gl_verbose && (($count % 100) == 0)) {
      # Provide some output to confirm the process is still running. By
      # only displaying every hundredth item, it doesn't overwhelm the
      # output.
      print "$id\n";
    }
    process_id($id);
    
    # Sleep for 1/10th of a second, to prevent a denial-of-service against
    # the databse or file system
    usleep(100);
    $id = pdb_iter_next($iter);
  }
  
  pdb_iter_done($iter);
}

sub process_id {
  my $id = $_[0];

  my $raw = pfs_get_raw_location($id);
  process_image("raw", $raw, $id);
  my $orig = pfs_get_orig_location($id);
  process_image("orig", $orig, $id);
  my $edited = pfs_get_edited_location($id);
  process_image("edited", $edited, $id);
}

sub process_image {
  my $type = $_[0];
  my $fname = $_[1];
  my $id = $_[2];

  if ($fname eq "") {
    # no file for this type
    return;
  }

  my $basename = "";
  if ($fname =~ /\/(\w+\/[\w\-\.]+)$/) {
    $basename = $1;
  } else {
    print "Can't parse fname $fname for ID $id\n";
    return;
  }

  check_hash($type, $basename, $fname, $id);
}

sub check_hash {
  my $type = $_[0];
  my $basename = $_[1];
  my $fname = $_[2];
  my $id = $_[3];
  
  my $stored_hash = phash_get_value("f-$basename");
  my $calculated_hash = phash_do_hash_file($fname);
  if ($stored_hash ne $calculated_hash) {
    if (($stored_hash eq "") && ($calculated_hash ne "")) {
      # The hash for this file wasn't stored yet, add it
      phash_set_value("f-$basename", "file", $calculated_hash);
    } else {
      print "File $basename ($id $type)\n";
      print "      stored hash: $stored_hash\n";
      print "  calculated hash: $calculated_hash\n";
      if ($gl_update) {
        phash_set_value("f-$basename", "file", $calculated_hash);
        print "--> Updated\n";
      }
    }
  }
}
