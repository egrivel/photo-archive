#!/usr/bin/perl -w

my $arg = shift;
while (defined($arg)) {
  if ($arg eq "-h" || $arg eq "--help") {
    disp_help();
    exit(0);
  } else {
    die "Unrecognized argument: '$arg'\n";
  }
}

my $script = __FILE__;
my $localdir = ".";
if ($script =~ s/\/[^\/]*$//) {
  $localdir = $script;
}
push @INC, "$localdir/../inc";

require 'photos_util.pm';

pdb_init();

process_all();
exit(0);

sub disp_help {
  print "Usage:\n";
  print "  phlisthash\n";
  print "\n";
  print "Go through the database and list the stored hash of every original\n";
  print "image file in the database. The hash information is printed to\n";
  print "standard output.\n";
  print "Output format:\n";
  print "  <imageId> <fileName> <hash>\n";
  print "The filename is relative to the set directory, e.g. 'tif/00101.jpg'\n";
  print "or 'edited/12301.jpg'.\n";
}

sub process_all {
  # Iterate over all the photos in the database
  my $iter = pdb_iter_new("", 500);
  my $id = pdb_iter_next($iter);

  while (defined($id) && ($id ne "")) {
    process_id($id);

    # Sleep for 1/10th of a second, to prevent a denial-of-service against
    # the databse or file system
    usleep(100);
    $id = pdb_iter_next($iter);
  }

  pdb_iter_done($iter);
}

sub process_id {
  my $id = $_[0];

  my $raw = pfs_get_raw_location($id);
  process_image("raw", $raw, $id);
  if (~ ($raw =~ /\.nef$/)) {
    # for .nef files, the "original" is extracted from the raw file, so
    # it is reproducible as long as the raw file is still there
    my $orig = pfs_get_orig_location($id);
    process_image("orig", $orig, $id);
  }
  my $edited = pfs_get_edited_location($id);
  process_image("edited", $edited, $id);
}

sub process_image {
  my $type = $_[0];
  my $fname = $_[1];
  my $id = $_[2];

  if ($fname eq "") {
    # no file for this type
    return;
  }

  my $basename = "";
  if ($fname =~ /\/(\w+\/[\w\-\.]+)$/) {
    $basename = $1;
  } else {
    print "Can't parse fname $fname for ID $id\n";
    return;
  }

  my $stored_hash = phash_get_value("f-$basename");
  if ($stored_hash ne "") {
    print "$id $basename $stored_hash\n";
  }
}
