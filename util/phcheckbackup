#!/usr/bin/perl -w

my $script = __FILE__;
my $localdir = ".";
if ($script =~ s/\/[^\/]*$//) {
  $localdir = $script;
}
push @INC, "$localdir/../inc";

# Tools to calculate the hash of a file on the file sysstemx
require 'photos_hash_tools.pm';

my %gl_settings = ();
my %gl_file_not_found = ();
my %gl_file_done = ();

my $gl_quiet = 0;

read_settings();

my $hashlist = "";

my $arg = shift;
while (defined($arg)) {
  if ($arg eq "-help" || $arg eq "--help") {
    disp_help();
    exit(0);
  }
  if (-f $arg) {
    if ($hashlist ne "") {
      die "Cannot give two arguments\n";
    }
    $hashlist = $arg;
  } elsif ($arg eq "-q" || $arg eq "--quiet") {
    $gl_quiet = 1;
  } elsif ($arg =~ /^-/) {
    die "Do not recognize argument '$arg'\n";
  } else {
    die "Argument '$arg' is not a hash list file\n";
  }
  $arg = shift;
}

if ($hashlist eq "") {
  die "Need to profile the hash list file as command line argument.\n";
}

system("echo Checking the photo backup: start `date`") if (!$gl_quiet);
process_all($hashlist);
system("echo Checing the photo backup: done `date`") if (!$gl_quiet);
exit(0);

sub disp_help {
  print "Usage:\n";
  print "  phcheckbackup <hashlist>\n";
  print "\n";
  print "Go through all the hashes in the hash list and verify that the\n";
  print "image files on the file system have that hash.\n";
  print "A configuration file must be specified as the command line\n";
  print "argument to define the location of the image files. The config\n";
  print "file has the following format:\n";
  print "  default <directory>\n";
  print "  <set1>-<set2> <directory>\n";
  print "  ...\n";
  print "that is:\n";
  print " - One entry for the 'default' root directory, for any set not\n";
  print "   matched by any of the other lines.\n";
  print " - Zero or more entries with a start set and an end set with a\n";
  print "   root directory for sets in that range.\n";
}

sub process_all {
  my $hashlist = $_[0];

  open(FILE, "<$hashlist") || die "Cannot read file '$hashlist'\n";

  while (<FILE>) {
    if (/^([\w\-]+)\s+([\w\/\.\-]+)\s+(\w+)\s*$/) {
      my $id = $1;
      my $fname = $2;
      my $hash = $3;
      check_file($id, $fname, $hash);
    } else {
      die "Unrecognized line in input: '$_'\n";
    }
  }
  close FILE;

  foreach $key (keys %gl_file_not_found) {
    my $fname = $key;
    if ($fname =~ s/\.jpg$/.nef/) {
      next if (defined($gl_file_done{$fname}));
    }
    print "File $key not found\n";
  }
}

sub find_rootdir {
  my $set = $_[0];

  my $dir = setting_get("photosdir");
  if ($dir eq "") {
    die "Cannot find setting 'photosdir'\n";
  }

  my $dir2 = setting_get("photos2dir");
  if (($dir2 eq "") || ($dir2 eq $dir)) {
    # If there is no different second dir, the directory is always the
    # primary directory
    return $dir;
  }

  my $start = setting_get("photos2start");
  my $end = setting_get("photos2end");
  if ($start eq "" || $end eq "") {
    # No start or end given; default to photos from 2008 onward in the
    # alternate location
    if ($set =~ /^(\d\d\d\d)\d\d\d\d$/) {
      my $year = $1;
      if ($year >= 2008) {
        return $dir2;
      }
    }
  }

  if ( $start =~ /^\d\d\d\d\d\d\d\d/
    && $end =~ /^\d\d\d\d\d\d\d\d/
    && $set =~ /^\d\d\d\d\d\d\d\d/) {
    # start, end and set are all digital
    if ($set ge $start && $set le $end) {
      # The set is in the range for the alternet directory
      return $dir2;
    }
  }

  if ($start =~ /^\w\d\d$/ && $end =~ /^\w\d\d$/ && $set =~ /^\w\d\d$/) {
    # Start, end and set are all non-digital
    if ($set ge $start && $set le $end) {
      # The set is in the range for the alternet directory
      return $dir2;
    }
  }

  # None of the exceptions apply
  return $dir;
}

sub check_file {
  my $id = $_[0];
  my $basename = $_[1];
  my $hash = $_[2];

  my $set = "";
  if ($id =~ /^(\w\d\d)\d\d\w?$/) {
    $set = $1;
  } elsif ($id =~ /^(\d\d\d\d\d\d\d\d)-(\d\d\d\d\d\d\w?)$/) {
    $set = $1;
  } else {
    die "Unrecognized id '$id'\n";
  }

  my $rootdir = find_rootdir($set);
  my $fname = "$rootdir/$set/$basename";

  if (!(-f $fname)) {
    # File not found;
    $gl_file_not_found{$fname}++;
    return;
  }

  # print "Check hash for $fname\n";
  my $file_hash = phash_do_hash_file($fname);
  if ($file_hash ne $hash) {
    print "$id: $fname: hash mismatch:\n";
    print "  File hash: $file_hash\n";
    print "  Expected : $hash\n";
  }

  $gl_file_done{$fname}++;
}

sub read_settings {
  my $script = __FILE__;
  my $localdir = ".";
  if ($script =~ s/\/[^\/]*$//) {
    $localdir = $script;
  }

  if (-f "$localdir/../private/photos.ini") {
    open(FILE, "<$localdir/../private/photos.ini");
    while (<FILE>) {
      chomp;
      s/\r//;

      # Remove comments (but allow for escaped hashes)
      s/\\\#/&hash;/g;
      s/\s*\#.*$//;
      s/&hash;/\#/g;

      if (/^\s*([\w\-]+)\s*=\s*(.*?)\s*$/) {
        $gl_settings{$1} = $2;
      }
    }
    close FILE;
  }
}

sub setting_get {
  my $name = $_[0];

  if (defined($gl_settings{$name})) {
    return $gl_settings{$name};
  }

  return "";
}
