#!/usr/bin/perl

my $script = __FILE__;
my $localdir = ".";
if ($script =~ s/\/[^\/]*$//) {
  $localdir = $script;
}
push @INC, "$localdir/../inc";

require "photos_util.pm";

put_init();
put_restore_session();

my $start = get_value("start");
my $end = get_value("end");
my $image = get_value("image");

# auto-refresh, must be whole number
my $auto = get_value("auto");
if (!($auto =~ /^\d+$/)) {
  $auto = "";
}

if ($image eq "") {
  $image = $start;
}

if ( ($image =~ /^\d\d\d\d\d\d\d\d$/)
  || ($image =~ /^\w\d\d$/)) {
  # Image is a set; use get next to get the first of the set
  $image = get_next_image($image);
}

my $next = get_next_image($image);

my $is_end = 0;
if ($next eq "" || $next eq $image) {
  $is_end = 1;
} elsif ($end ne "") {
  # If $end is blank, go all the way to the end
  if ( ($end =~ /^\d\d\d\d\d\d\d\d$/)
    || ($end =~ /^\w\d\d$/)) {
    # End is a set; check against the set name
    my $imageset = "";
    if ($next =~ /^(\w\d\d)\d\d\w?$/) {
      $imageset = $1;
    } elsif ($next =~ /^(\d\d\d\d\d\d\d\d)-\d\d\d\d\d\d\w?$/) {
      $imageset = $1;
    }
    if ($imageset gt $end) {
      $is_end = 1;
    }
  } else {
    if ($next gt $end) {
      $is_end = 1;
    }
  }
}

if ($is_end) {
  # Reached the end; wrap back to the start
  $next = $start;
  if ( ($next =~ /^\d\d\d\d\d\d\d\d$/)
    || ($next =~ /^\w\d\d$/)) {
    # Start is a set; use get next to get the first of the set
    $next = get_next_image($next);
  }
}

display_img($image, $next, $start, $end, $auto);
exit(0);

sub display_img {
  my $image = $_[0];
  my $next = $_[1];
  my $start = $_[2];
  my $end = $_[3];
  my $auto = $_[4];

  # Default size to "m5", which is about 1920x1080, which should be a good
  # default for most phone, tablet and laptop displays
  my $size = "m5";

  my $image_url = "phimg?$size=$image&orientation=landscape";

  my $content = "";

  # Build the header elements. This contains custom styles and the script to
  # handle the body click.
  my $header = "";

  $header .= "<style>\n";
  $header .= "html {\n";
  $header .= "  height: 100%;\n";
  $header .= "}\n";
  if (pdb_get_type($image) ne "MOV") {
    $header .= "body.slideshow {\n";
    $header .= "  background-image: url('$image_url');\n";
    $header .= "}\n";
  }
  $header .= "</style>\n";

  my $next_url = "phslideshow?image=$next";
  $next_url .= "&start=$start" if ($start ne "");
  $next_url .= "&end=$end" if ($end ne "");
  $next_url .= "&auto=$auto" if ($auto ne "");

  $header .= "<script>\n";
  $header .= "function goNext() {\n";
  $header .= "  location='$next_url';\n";
  $header .= "};\n";
  $header .= "</script>\n";

  pht_add_header($header);

  if ($auto ne "" && $auto > 0) {
    pht_set_refresh("$auto; url='$next_url'");
  }

  if (pdb_get_type($image) eq "MOV") {
    $content =
        "<video width='80%' height='80%' "
      . "controls poster='phimg?mov=$image'>"
      . "<source src='phmov?mov=$image' type='video/mp4'/>"
      . "</video>";
  }

  pht_page_start(0, 0);

  print "<body class='slideshow' onclick='goNext()'>\n";
  print $content;

  # Pre-load the next image, to make loading faster
  print "<img src='./phimg?$size=$next&orientation=landscape' width='1' ";
  print " height='1' border='0'>\n";

  pht_page_end(0);
}

sub get_value {
  my $varname = $_[0];
  my $default = $_[1];
  if (!defined($default)) {
    $default = "";
  }

  my $value = $default;

  if (parg_exists($varname)) {
    $value = parg_get($varname);
    # Note: using value from session is disabled for now, it doesn't work
    # through the proxy
    # # Specific value specified; save it in the session
    # pses_set($varname, $value);
    # } else {
    #   # No value specified; get one from the session
    #   my $temp = pses_get($varname);
    #   if ($temp ne "") {
    #     $value = $temp;
    #   }
  }
  return $value;
}

sub set_value {
  my $varname = $_[0];
  my $value = $_[1];
  pses_set($varname, $value);
  return $value;
}

sub get_next_image {
  my $imageid = $_[0];

  my $user = $PUSR_GUEST_ACCOUNT;

  # Set the filters appropriately
  my $types = get_types($user);
  my $min_quality = get_value("min_quality");
  if ($min_quality eq "") {
    $min_quality = get_quality($user);
  }

  # Determine the next image

  my $class = put_get_class($imageid);

  my $iter = pdb_iter_new($imageid);
  pdb_iter_filter_category($iter, $types);
  pdb_iter_filter_min_quality($iter, $min_quality);

  my $next = pdb_iter_next($iter);
  if ($next eq $imageid) {
    $next = pdb_iter_next($iter);
  }
  pdb_iter_done($iter);

  if (put_get_class($next) ne $class) {
    # different class, so do not walk over into it
    $next = "";
  }
  return $next;
}

sub get_types {
  my $effective_user = $_[0];

  if ($effective_user ne "") {
    # Use the edit function to retrieve the settings for the
    # "random" user
    pusr_load($effective_user);
  }

  my $types = put_types();

  return $types;
}

sub get_quality {
  my $effective_user = $_[0];

  if ($effective_user ne "") {
    # Use the edit function to retrieve the settings for the
    # "random" user
    pusr_load($effective_user);
  }

  my $quality = put_quality();

  return $quality;
}
