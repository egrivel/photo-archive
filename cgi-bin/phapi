#!/usr/bin/perl -w -I .

# Provide an API to get information from the photo archive
use inc_all;

# Need to make sure that Perl properly outputs utf-8... not sure if both are
# necessary. I think the first one makes sure the accented characters in this
# script are handled correctly, and the second one may be making sure the output
# channel handles UTF-8....
use utf8;
binmode(STDOUT, ":utf8");

# Also, make sure we properly declare the content as UTF-8
print "Content-type: application/json;charset=utf-8\n\n";
my $data = "";

put_init();
# The logout function effectively "logs in" the guest user
pusr_logout();

my $action = parg_get("action");
if ($action eq "all") {
  $data = get_all_info();
} elsif ($action eq "messages") {
  $data = get_message_info();
} elsif ($action eq "year") {
  my $year = parg_get("year");
  if ($year ne "") {
    $data = get_year_info($year);
  }
} elsif ($action eq "type") {
  my $type = parg_get("type");
  if ($type ne "") {
    $data = get_type_info($type);
  }
} elsif ($action eq "set") {
  my $setId = parg_get("setId");
  if ($setId ne "") {
    $data = get_set_info($setId);
  }
} elsif ($action eq "image") {
  my $imageId = parg_get("imageId");
  if ($imageId ne "") {
    $data = get_image_info($imageId);
  }
} elsif ($action eq "random") {
  my $imageId = randomImage();
  if ($imageId ne "") {
    $data = get_image_info($imageId);
  }
} elsif ($action eq "search") {
  my $keyword = parg_get("keyword");
  my $year = parg_get("year");
  my $persons = parg_get("persons");
  my $limit = parg_get("limit");
  my $page = parg_get("page");
  $data = get_search_results($keyword, $year, $persons, $limit, $page);
} elsif ($action eq "log") {
  my $message = parg_get("message");
  $data = do_log($message);
}

if ($data eq "") {
  print "{\"error\":\"No Action or unrecognized action\"}";
} else {
  print $data;
}

exit(0);

sub randomImage {
  my $types = put_types();
  pdb_filter_category($types);

  my $quality = put_quality();
  pdb_filter_min_quality($quality);

  my $imageId = pdb_random_image();
  my $set = pcom_get_set($imageId);
  my $setcategory = pdb_get_setcategory($set);
  while (!($types =~ /$setcategory/)) {
    $imageId = pdb_random_image();
    $set = pcom_get_set($imageId);
    $setcategory = pdb_get_setcategory($set);
  }

  return $imageId;
}

sub json_out {
  my $name = $_[0];
  my $value = $_[1];

  my $out = "";
  $out .= "\"$name\":\"";

  # The following entity names seem to occur in the database
  $value =~ s/&apos;/’/g;
  $value =~ s/&auml;/ä/g;
  $value =~ s/&eacute;/é/g;
  $value =~ s/&egrave;/è/g;
  $value =~ s/&euml;/ë/g;
  $value =~ s/&iuml;/ï/g;
  $value =~ s/&ntilde;/ñ/g;
  $value =~ s/&oactue;/ó/g;
  $value =~ s/&ocirc;/ô/g;
  $value =~ s/&ouml;/ö/g;
  $value =~ s/&rsquo;/’/g;
  $value =~ s/&szlig;/ß/g;
  $value =~ s/&uuml;/ü/g;
  $value =~ s/&amp;/&/g;

  # Escape the double quote because that would terminate the string in JSON
  $value =~ s/"/&quot;/g;
  $out .= "$value\"";

  return $out;
}

sub get_all_info {
  my $out = "";

  $out .= "{\n";

  $out .= "\"years\":[\n";
  my $first_year = pcom_first_year();
  my $last_year = pcom_last_year();
  for (my $i = $first_year; $i <= $last_year; $i++) {
    if ($i != $first_year) {
      $out .= ",\n";
    }
    $out .= "{\n";
    $out .= json_out("year", $i) . ",\n";
    $out .= json_out("description", $i) . "\n";
    $out .= "}";
  }
  $out .= "],\n";

  # Specials are hard-coded
  $out .= "\"specials\":[\n";
  $out .= "{\n";
  $out .= json_out("year", "9999") . ",\n";
  $out .= json_out("description", "Special Photos") . "\n";
  $out .= "},{\n";
  $out .= json_out("type", "d") . ",\n";
  $out .= json_out("description", "Photos and Slides by my Parents") . "\n";
  $out .= "}\n";
  $out .= "],\n";

  my $firstYear = pcom_first_year();
  my $lastYear = pcom_last_year();
  $out .= json_out("firstYear", $firstYear) . ",\n";
  $out .= json_out("lastYear", $lastYear) . ",\n";

  my $firstSet = pcom_first_set();
  my $lastSet = pcom_last_set();
  $out .= json_out("firstSet", $firstSet) . ",\n";
  $out .= json_out("lastSet", $lastSet) . ",\n";

  my $total = pdb_image_count();
  $out .= json_out("total", $total) . "\n";

  my $messages = get_messages();
  if ($messages ne "") {
    $out .= ",\n\"messages\": $messages\n";
  }

  $out .= "}\n";

  return $out;
}

sub get_messages {
  my $script = __FILE__;
  my $localdir = ".";
  if ($script =~ s/\/[^\/]*$//) {
    $localdir = $script;
  }
  my $fname = "$localdir/../private/messages.json";
  my $out = "";
  if (-f $fname) {
    $out = do {
      local $/ = undef;
      open my $fh, "<", $fname || die "could not open $fname: $!";
      <$fh>;
    };
  }

  return $out;
}

sub get_message_info {
  my $out = get_messages();
  if ($out eq "") {
    return "[]\n";
  }
  return $out;
}

sub get_year_info {
  my $year = $_[0];
  my $out = "";

  $out .= "{\n";
  $out .= json_out("year", $year) . ",\n";

  $out .= "\"sets\":[\n";
  my $iter = pdb_iter_set_new();
  pdb_iter_filter_category($iter, put_types());
  pdb_iter_filter_year($iter, $year);
  my $setId = "";
  $setId = pdb_iter_next($iter);
  my $isFirst = 1;
  while ($setId ne "") {
    my $title = pdb_get_settitle($setId);
    if ($title eq "") {
      $title = "Film $setId";
    }
    my $datetime = pdb_get_setdatetime($setId);
    my $descr = pdb_get_setdescription($setId);

    if (!$isFirst) {
      $out .= ",\n";
    }
    $out .= "{\n";
    $out .= json_out("setId", $setId) . ",\n";
    $out .= json_out("title", $title) . ",\n";
    $out .= json_out("datetime", $datetime) . ",\n";
    $out .= json_out("description", $descr) . "\n";
    $out .= "}";
    $isFirst = 0;
    $setId = pdb_iter_next($iter);
  }
  $out .= "]\n";

  $out .= "}\n";

  return $out;
}

sub get_type_info {
  my $type = $_[0];
  my $out = "";

  $out .= "{\n";
  $out .= "\"type\":\"$type\",\n";

  $out .= "\"sets\":[\n";
  my $iter = pdb_iter_set_new();
  pdb_iter_filter_category($iter, $type);
  my $setId = pdb_iter_next($iter);

  my $isFirst = 1;
  while ($setId ne "") {
    my $title = pdb_get_settitle($setId);
    if ($title eq "") {
      $title = "Film $setId";
    }
    my $datetime = pdb_get_setdatetime($setId);
    my $descr = pdb_get_setdescription($setId);

    if (!$isFirst) {
      $out .= ",\n";
    }
    $out .= "{\n";
    $out .= json_out("setId", $setId) . ",\n";
    $out .= json_out("title", $title) . ",\n";
    $out .= json_out("datetime", $datetime) . ",\n";
    $out .= json_out("description", $descr) . "\n";
    $out .= "}";
    $isFirst = 0;
    $setId = pdb_iter_next($iter);
  }
  $out .= "]\n";

  $out .= "}\n";

  return $out;
}

sub get_set_info {
  my $setId = $_[0];
  my $out = "";

  my $category = pdb_get_setcategory($setId);
  if (!pdb_set_exists($setId)
    || (($category ne "") && !pusr_allowed($category))) {
    return "{\"error\":\"Not found\"}\n";
  }

  $out .= "{";

  my $title = pdb_get_settitle($setId);
  my $datetime = pdb_get_setdatetime($setId);
  my $description = pdb_get_setdescription($setId);
  my $comment = pdb_get_setcomment($setId);
  my $copyright = pdb_get_setcopyright($setId);
  my $year = pdb_get_setyear($setId);
  my $next = put_get_next_set($setId);
  my $prev = put_get_prev_set($setId);

  $out .= json_out("title", $title) . ",\n";
  $out .= json_out("datetime", $datetime) . ",\n";
  $out .= json_out("description", $description) . ",\n";
  $out .= json_out("copyright", $copyright) . ",\n";
  $out .= json_out("year", $year) . ",\n";
  $out .= json_out("next", $next) . ",\n";
  $out .= json_out("prev", $prev) . ",\n";

  my $iter = pdb_iter_new($setId, 40);
  pdb_iter_filter_setid($iter, $setId);
  pdb_iter_filter_category($iter, put_types());
  pdb_iter_filter_min_quality($iter, put_quality());
  my $imageId = pdb_iter_next($iter);
  my $imagecount = 0;

  $out .= "\"photos\":[";
  my $photoInfo = "\"photoInfo\":[";
  my $isFirst = 1;
  while (pcom_get_set($imageId) le $setId) {
    # Note: Because the sort ID uses GMT, it is possible to get images
    # from the previous day when iterating through the sets. Skip
    # those.
    if (pcom_get_set($imageId) lt $setId) {
      if (pcom_is_digital($imageId)) {
        $imageId = pdb_iter_next($iter);
        next;
      } else {
        # if not a digital photo, break out of the loop
        last;
      }
    }

    if (!$isFirst) {
      $out .= ",";
      $photoInfo .= ",\n";
    }
    $out .= "\"$imageId\"";

    my $orientation = pdb_get_orientation($imageId);
    my $title = pdb_get_title($imageId);
    my $description = pdb_get_description($imageId);

    $photoInfo .= "{\n";
    $photoInfo .= json_out("imageId", $imageId) . ",\n";
    $photoInfo .= json_out("title", $title) . ",\n";
    $photoInfo .= json_out("description", $description) . ",\n";
    $photoInfo .= json_out("orientation", $orientation) . "\n";
    $photoInfo .= "}";
    $isFirst = 0;
    $imageId = pdb_iter_next($iter);
  }
  $out .= "],\n";

  $photoInfo .= "]\n";
  $out .= $photoInfo;
  $out .= "}\n";

  return $out;
}

sub get_image_info {
  my $imageId = $_[0];
  my $out = "";

  my $category = pdb_get_category($imageId);
  if (!pdb_image_exists($imageId)
    || (($category ne "") && !pusr_allowed($category))) {
    return "{\"error\":\"Not found\"}\n";
  }

  my $copyright = pdb_get_copyright($imageId);
  my $datetime = pdb_get_datetime($imageId);
  my $description = pdb_get_description($imageId);
  my $latlong = pdb_get_latlong($imageId);
  my $location = pdb_get_location($imageId);
  my $next = put_get_next($imageId);
  my $orientation = pdb_get_orientation($imageId);
  my $personIdList = ppers_get_persons_in_image($imageId);
  my $persons = pdb_get_persons($imageId);
  my $prev = put_get_prev($imageId);
  my $quality = pdb_get_quality($imageId);
  my $setId = pdb_get_setid($imageId);
  my $title = pdb_get_title($imageId);
  my $year = pdb_get_year($imageId);

  # The file name is needed to get the image dimensions. Start the with "m5"
  # mobile file, this is the one that'll be returned. If that file isn't
  # there, try other file locations.
  my $fname = pfs_get_mobile_location($imageId, "m5");
  if ($fname eq "") {
    $fname = pfs_get_edited_location($imageId);
  }
  if ($fname eq "") {
    $fname = pfs_get_orig_location($imageId);
  }
  if ($fname eq "") {
    # If there is no original (JPG) file, get the raw file; this is used to
    # determine the file sizes
    $fname = pfs_get_raw_location($imageId);
  }

  # Get the (original) width and height of the image, to calculate display
  # size for "freeform" images.
  my ($width, $height) = pfs_get_file_dimensions($fname);

  $out .= "{\n";
  $out .= json_out("imageId", $imageId) . ",\n";
  $out .= json_out("category", $category) . ",\n";
  $out .= json_out("copyright", $copyright) . ",\n";
  $out .= json_out("datetime", $datetime) . ",\n";
  $out .= json_out("description", $description) . ",\n";
  $out .= json_out("height", $height) . ",\n";
  $out .= json_out("latlong", $latlong) . ",\n";
  $out .= json_out("location", $location) . ",\n";
  $out .= json_out("next", $next) . ",\n";
  $out .= json_out("orientation", $orientation) . ",\n";
  $out .= json_out("personIdList", $personIdList) . ",\n";
  $out .= json_out("persons", $persons) . ",\n";
  $out .= json_out("prev", $prev) . ",\n";
  $out .= json_out("quality", $quality) . ",\n";
  $out .= json_out("setId", $setId) . ",\n";
  $out .= json_out("title", $title) . ",\n";
  $out .= json_out("width", $width) . ",\n";
  $out .= json_out("year", $year) . "\n";

  $out .= "}\n";

  return $out;
}

sub get_search_results {
  my $keyword = $_[0];
  my $yearInput = $_[1];
  my $persons = $_[2];
  my $limit = $_[3];
  my $page = $_[4];

  my $out = "";

  my $start_year = "";
  my $end_year = "";
  my $year = "";
  if ($yearInput =~ /^\s*(\d\d\d\d)\s*-\s*(\d\d\d\d)\s*$/) {
    $start_year = $1;
    $end_year = $2;
    $year = "";
    if ( ($start_year < 1800)
      || ($start_year > 9999)
      || ($end_year < 1800)
      || ($end_year > 9999)
      || ($start_year > $end_year)) {
      $start_year = "";
      $end_year = "";
    }
  } elsif ($yearInput =~ /^\s*(\d\d\d\d)\s*$/) {
    $year = $1;
    if ( ($year < 1800)
      || ($year > 9999)) {
      $year = "";
    }
  } else {
    $year = "";
  }

  my $person_filter = "";
  my $person_filter_exclude = "";
  my $person_list = "";
  if ($persons ne "") {
    my $ids = ppers_names_to_ids($persons, 1);
    if ($ids eq "") {
      # No IDs found, possibly only punctuation in $person, so treat it
      # as no persons entered
      $persons = "";
    } elsif ($ids =~ s/^ERROR: //) {
      $ids =~ s/; /<\/li>\n<li>/g;
      pht_output(
        "<p>One or more names not recognized:</p><ul><li>$ids</li></ul>\n");
      search_form();
      pht_page_end();
      exit(0);
    } else {
      $person_filter = ppers_get_filter($ids);
      $person_filter_exclude = ppers_get_filter_exclude($ids);
      $person_list = ppers_ids_to_names($ids);
    }
  }

  if ((!($limit =~ /^\d+$/)) || ($limit > 100)) {
    $limit = 50;
  }

  if (!defined($page) || !($page =~ /^\d+$/)) {
    # Missing or unrecognized page parameter, default to first page
    $page = 0;
  }

  my $iter = pdb_iter_new("00101", $limit, $page);
  my $count = 0;
  $out = "";

  if ($persons ne "") {
    if ($person_filter ne "()") {
      pdb_iter_filter_persons($iter, $person_filter);
    }
  }

  if ($keyword ne "") {
    pdb_iter_filter_keyword($iter, $keyword);
  }

  if ($year ne "") {
    pdb_iter_filter_year($iter, $year);
  }
  if (($start_year ne "") && ($end_year ne "")) {
    pdb_iter_filter_year_range($iter, $start_year, $end_year);
  }

  $out .= "{";
  $out .= "\"page\":$page,\n";
  $out .= "\"pageSize\":$limit,\n";
  $out .= "\"count\":" . pdb_iter_count($iter) . ",\n";
  $out .= "\"photos\":[";
  my $photoInfo = "\"photoInfo\":[";

  my $isFirst = 1;
  my $imageId = pdb_iter_next($iter);
  while (defined($imageId) && ($imageId ne "")) {
    if ($person_filter_exclude =~ /'$imageId'/) {
      # Skip all excluded photos
      $imageId = pdb_iter_next($iter);
      next;
    }
    # add imageId to the output
    if (!$isFirst) {
      $out .= ",";
      $photoInfo .= ",\n";
    }
    $isFirst = 0;
    $out .= "\"$imageId\"";
    my $orientation = pdb_get_orientation($imageId);
    my $title = pdb_get_title($imageId);
    my $description = pdb_get_description($imageId);

    $photoInfo .= "{\n";
    $photoInfo .= json_out("imageId", $imageId) . ",\n";
    $photoInfo .= json_out("title", $title) . ",\n";
    $photoInfo .= json_out("description", $description) . ",\n";
    $photoInfo .= json_out("orientation", $orientation) . "\n";
    $photoInfo .= "}";
    $isFirst = 0;

    $count++;
    last if ($count >= $limit);
    $imageId = pdb_iter_next($iter);
  }

  $out .= "],\n";

  $photoInfo .= "]\n";
  $out .= $photoInfo;
  $out .= "}\n";

  return $out;
}

sub do_log {
  my $message = $_[0];

  my $api_log_dir = setting_get("api-log-dir");
  if ($api_log_dir ne "") {
    open(FILE, ">>$api_log_dir/api-log.txt");
    my $now = time();
    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) =
      localtime($now);
    my $timestamp = sprintf(
      "%04d-%02d-%02d %02d:%02d:%02d",
      $year + 1900,
      $mon + 1, $mday, $hour, $min, $sec
    );
    $ip = $ENV{REMOTE_ADDR};
    print FILE "$ip|$timestamp|$message\n";
    close FILE;
    return "{\"OK\": 1}";
  }
}
